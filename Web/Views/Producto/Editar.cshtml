@model Infraestructure.Models.Producto

@{
    ViewBag.Title = "Editar";
}

<h2>Editar</h2>






@using (Html.BeginForm("Save", "Producto", FormMethod.Post, new { enctype = "multipart/form-data" }))

{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IdProducto)

    #region
    <div class="producto-container row py-3">

        <div class="col-sm-4" style="border-right: 1px solid #9c9393">

            <div>

                <img id="img-focus" class="producto-image" src="~/src/img/no-photo.jpg"
                     alt="No hay fotos" />
            </div>
            <div class="flex-column py-2 px-1 tn-img">
                <output class="col-1-md tn-img">
                </output>
            </div>
            <div class="form-group mb-3">
                @Html.LabelFor(model => model.Foto, "Agregar Imagen", htmlAttributes: new { @class = "control-label col-md-12 mb-2", })
                <div class="col-md-10">
                    <input type="file" name="images" multiple="multiple" accept="image/jpeg, image/png, image/jpg" class="form-control lmao">
                </div>
            </div>
        </div>
        <div class="col-sm-8 py-2 px-3">
            <div class="form-group">
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control", @placeholder = "Nombre" } })
                    @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger text-validation" })
                </div>
            </div>
            <hr style="
       border-width: 2px;
       border-style: solid;
       border-image: linear-gradient(90deg, rgba(213,0,255,1) 0%, rgba(255,156,0,1) 100%) 1;" />
            <div class="desc-box">
                <div class="row">

                    <div class="col-md-12 mb-3">
                        <h5>
                            @Html.DisplayNameFor(model => model.Descripcion)
                        </h5>
                        <hr />
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-text" } })
                            @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <br />
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>
                                @Html.DisplayNameFor(model => model.Categoria)
                            </h6>
                            <hr />
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.DropDownList("IdCategoria", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdCategoria, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">

                            <h6>
                                @Html.DisplayNameFor(model => model.Estado)
                            </h6>
                            <hr />

                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.DropDownList("IdEstado", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.IdEstado, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>
                                @Html.DisplayNameFor(model => model.Cantidad)
                            </h6>
                            <hr />
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.Cantidad, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Cantidad, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>
                                @Html.DisplayNameFor(model => model.Precio)
                            </h6>
                            <hr />
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mb-3">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Guardar" readonly class="btn btn-comprar" />
                        </div>
                    </div>
                </div>
            </div>



        </div>
    </div>

    #endregion


    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
    </script>

    <script>
        const output = document.querySelector("output")
        const input = document.querySelector(".lmao")
        const dt = new DataTransfer()
        let imagesArray = []
        var doneOnce = false;
        //new File([parts], filename, options)
        //new Blob([parts], options)
        let preCarga = [];



        //var src = "data:image/jpeg;chartset=utf-8;base64," + Convert.ToBase64String(foto.Media);

        input.addEventListener("change", () => {
            const files = input.files
            for (let i = 0; i < files.length; i++) {
                imagesArray.push(files[i])
            }
            if (doneOnce == false) {
                var src = URL.createObjectURL(imagesArray[0]);
                changeSrc(src);
                doneOnce = true;
            }
            displayImages()
        })

        input.addEventListener("change", () => {
            const { files } = input

            for (let i = 0; i < files.length; i++) {
                const file = files[i]
                dt.items.add(file)
            }
            input.files = dt.files // Assign the updates list
        })



        function changeSrc(src) {
            if (src != null) {
                var imgsrc = src;
                document.getElementById("img-focus").src = imgsrc;
            }
        }

        function displayImages() {
            let images = ""
            imagesArray.forEach((image, index) => {
                images += `<div class="">
        <img readonly src="${URL.createObjectURL(image)}" onclick="changeSrc(src)" alt="image">
        <span readonly style="cursor: pointer; " onclick="deleteImage(${index})">&times;</span>
</div>`
            })
            output.innerHTML = images
        }

        function deleteImage(index) {
            imagesArray.splice(index, 1)
            const { files } = input

            for (let i = 0; i < files.length; i++) {
                if (i == index) {
                    let file = files[i];
                    dt.items.remove(file)

                }
            }
            input.files = dt.files // Assign the updates list
            displayImages()
        }


    </script>


}

